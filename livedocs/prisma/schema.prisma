generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum AccessRole {
  VIEWER
  EDITOR
  OWNER
}

enum NotificationType {
  COMMENT
  COLLAB_INVITE
  ROLE_CHANGED
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions          Session[]       @relation("UserSessions")
  verificationCodes VerificationCode[] @relation("UserVerificationCodes")
  documents         Document[]       @relation("UserDocuments")
  accesses          DocumentAccess[] @relation("UserAccesses")
  comments          Comment[]        @relation("UserComments")
  sentNotifications Notification[]   @relation("SenderNotifications")
  receivedNotifications Notification[] @relation("ReceiverNotifications")

  @@index([email]) 
}

model VerificationCode {
  id        String           @id @default(uuid())
  userId    String          
  code      String           @db.VarChar(6)
  type      VerificationType 
  createdAt DateTime         @default(now())
  expiresAt DateTime         

  user      User @relation("UserVerificationCodes", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type]) 
  @@index([expiresAt]) 
}


model Session {
  id           String   @id @default(uuid())
  userId       String   
  userAgent    String   
  createdAt    DateTime @default(now())
  expiresAt    DateTime 

  user User @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Document {
  id        String          @id @default(uuid())
  title     String
  content   String          @db.Text
  ownerId   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  owner         User            @relation("UserDocuments", fields: [ownerId], references: [id], onDelete: Cascade)
  access        DocumentAccess[] @relation("DocumentAccesses")
  comments      Comment[]        @relation("DocumentComments")
  notifications Notification[]   @relation("DocumentNotifications")

  @@index([title])
}

model DocumentAccess {
  id         String    @id @default(uuid())
  documentId String   
  userId     String
  role       AccessRole
  createdAt  DateTime  @default(now())

  document Document @relation("DocumentAccesses", fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation("UserAccesses", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId]) 
  @@index([userId])
  @@index([documentId])
}

model Comment {
  id         String   @id @default(uuid())
  documentId String
  userId     String
  content    String
  tags       String[]
  createdAt  DateTime @default(now())

  user     User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  document Document @relation("DocumentComments", fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([userId])
}

model Notification {
  id         String           @id @default(uuid())
  userId     String
  senderId   String?
  documentId String?
  type       NotificationType
  message    String
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())

  user      User     @relation("ReceiverNotifications", fields: [userId], references: [id], onDelete: Cascade)
  sender    User?    @relation("SenderNotifications", fields: [senderId], references: [id], onDelete: SetNull)
  document  Document? @relation("DocumentNotifications", fields: [documentId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([documentId])
}
